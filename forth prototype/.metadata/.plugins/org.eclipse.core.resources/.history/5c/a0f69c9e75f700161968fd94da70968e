package src;
import javafx.animation.*;
import javafx.application.Application;
import javafx.beans.*;
import javafx.beans.binding.Bindings;
import javafx.beans.binding.StringBinding;
import javafx.beans.property.*;
import javafx.beans.value.WritableIntegerValue;
import javafx.event.*;
import javafx.geometry.Pos;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;

public class CountDownTimer extends Application {
  @Override public void start(final Stage stage) throws Exception {
    final CountDown countdown = new CountDown(600);
    final CountDownLabel countdownLabel  = new CountDownLabel(countdown);

    final Button countdownButton = new Button("  Start  ");
    final Button stopButton = new Button("  Stop   ");
    countdownButton.setOnAction(new EventHandler<ActionEvent>() {
      @Override public void handle(ActionEvent t) {
        countdownButton.setText("Restart");
        countdown.start();
      }
    });
    stopButton.setOnAction(new EventHandler<ActionEvent>() {
    	@Override public void handle(ActionEvent t){
    		countdown.stop();
    	}
    });

    VBox layout = new VBox(10);
    layout.getChildren().addAll(countdownLabel, countdownButton, stopButton);
    layout.setAlignment(Pos.BASELINE_RIGHT);
    layout.setStyle("-fx-background-color: cornsilk; -fx-padding: 20; -fx-font-size: 20;");

    stage.setScene(new Scene(layout));
    stage.show();
  }

  public static void main(String[] args) throws Exception {
    launch(args);
  }
}

class CountDownLabel extends Label {
  public CountDownLabel(final CountDown countdown) {
		  textProperty().bind(Bindings.format("%3d", countdown.getSecondsLeft()));
  }
}

class CountDown {
  private IntegerProperty timeLeft;
  //private ReadOnlyDoubleWrapper timeDouble;
  private final Timeline timeline;
  private int minsLeft;
  private int secsLeft;
  
  
  public StringBinding getSecondsLeft() {
    return secsLeft;
  }

  public CountDown(final int time) {
    timeLeft.set(10);

    timeline = new Timeline();
    
    KeyValue keyValue = new KeyValue(timeLeft, 0);
    KeyFrame keyFrame = new KeyFrame(Duration.seconds(time+1), keyValue);
    
    timeline.getKeyFrames().add(keyFrame);
    
    timeLeft.addListener(new InvalidationListener() {
    	@Override public void invalidated(Observable o){
    		minsLeft = (int) timeLeft.getValue()/60;
    		secsLeft = (int) timeLeft.getValue()%60;
    	}
    });
    
  }

  public void start() {
    timeline.playFromStart();
  }
  public void stop() {
	timeline.pause();
  }
}
